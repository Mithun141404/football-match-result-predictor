# -*- coding: utf-8 -*-
"""match predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hXbUo3ZGIsvky9-PPqNcczvAnr-J-_zp
"""

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from time import time
from sklearn.metrics import f1_score
from os import path, makedirs
from joblib import dump, load
import matplotlib.pyplot as plt

def train_classifier(clf, X_train, y_train):
    start = time()
    clf.fit(X_train, y_train)
    end = time()

def predict_labels(clf, features, target):
    start = time()
    y_pred = clf.predict(features)
    end = time()

    acc = sum(target == y_pred) / float(len(y_pred))

    return f1_score(target, y_pred, average='micro'), acc

def model(clf, X_train, y_train, X_test, y_test):
    train_classifier(clf, X_train, y_train)
    f1, acc = predict_labels(clf, X_train, y_train)

def get_user_input():
    print("Please enter the following match details:")
    home_encoded = int(input("Home Team Encoded: "))
    away_encoded = int(input("Away Team Encoded: "))
    HTHG = int(input("Home Team Half-Time Goals: "))
    HTAG = int(input("Away Team Half-Time Goals: "))
    HS = int(input("Home Team Shots: "))
    AS = int(input("Away Team Shots: "))
    HST = int(input("Home Team Shots on Target: "))
    AST = int(input("Away Team Shots on Target: "))
    HR =  int(input("Home Team Red Cards:"))
    AR = int(input("Away Team Red Cards:"))

    return pd.DataFrame({
        'home_encoded': [home_encoded],
        'away_encoded': [away_encoded],
        'HTHG': [HTHG],
        'HTAG': [HTAG],
        'HS': [HS],
        'AS': [AS],
        'HST': [HST],
        'AST': [AST],
        'HR': [HR],
        'AR': [AR]
    })

data = pd.read_csv("season-1819.csv")
encoder = LabelEncoder()
data['home_encoded'] = encoder.fit_transform(data['HomeTeam'])
encoder = LabelEncoder()
data['away_encoded'] = encoder.fit_transform(data['AwayTeam'])

input_filter = ['home_encoded', 'away_encoded', 'HTHG', 'HTAG', 'HS', 'AS', 'HST', 'AST','HR','AR']
output_filter = ['FTR']
cols_to_consider = input_filter + output_filter
data = data[cols_to_consider].dropna(axis=0)

X = data[input_filter]
Y = data['FTR']
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)


lr_classifier = LogisticRegression(multi_class='ovr', max_iter=500)
nbClassifier = GaussianNB()
rfClassifier = RandomForestClassifier()


model(lr_classifier, X_train, Y_train, X_test, Y_test)
model(nbClassifier, X_train, Y_train, X_test, Y_test)
model(rfClassifier, X_train, Y_train, X_test, Y_test)


shouldExport = input('Do you want to export the model(s) (y / n) ? ')
if shouldExport.strip().lower() == 'y':
    exportedModelsPath = 'exportedModels'
    makedirs(exportedModelsPath, exist_ok=True)
    dump(lr_classifier, f'{exportedModelsPath}/lr')

new_data = get_user_input()

loaded_model = load(f'{exportedModelsPath}/lr')
probabilities = loaded_model.predict_proba(new_data)
predictions = loaded_model.predict(new_data)


class_mapping = {'H': "Home Win", 'D': "Draw", 'A': "Away Win"}
predicted_labels = [class_mapping[pred] for pred in predictions]

print("Predictions:", predicted_labels)
rounded_probabilities = np.round(probabilities, 2)
print("Predicted Probabilities (rounded):", rounded_probabilities)

labels = ['Away Win', 'Draw', 'Home Win']
x = np.arange(len(labels))
width = 0.35

for i in range(len(new_data)):
    plt.bar(x + i * width, rounded_probabilities[i], width, label=f'Match {i + 1}')

plt.title('Predicted Probabilities for Each Match')
plt.xlabel('Outcome')
plt.ylabel('Predicted Probability')
plt.xticks(x + width / 2, labels)
plt.ylim(0, 1)
plt.legend()
plt.grid(axis='y')
plt.show()